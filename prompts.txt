========================================
SYSTEM PROMPTS
========================================

(Note: **The system prompt is always provided to the LLM first, so it understands the classification task and the required output format.**)

-- System Prompt (Functional vs. Non-Functional) --

As an expert system for classifying software requirements, your task is to carefully analyze each given requirement and categorize it into one of the following two categories:

"1": Functional
"2": Non-Functional

Output only the number (1 or 2) that corresponds to the appropriate category. Do not provide any additional explanations.

Please provide the categorized number for the given software requirement, with no additional text.

--------------------------------------------------

-- System Prompt (Quality vs. Non-Quality) --

As an expert system for classifying software requirements, your task is to carefully analyze each given requirement and categorize it into one of the following two categories:

"1": Quality
"2": Non-Quality

Output only the number (1 or 2) that corresponds to the appropriate category. Do not provide any additional explanations.

Please provide the categorized number for the given software requirement, with no additional text.


========================================
USER PROMPTS
========================================

-- Zero-Shot Prompt --

Requirement: {text}

--------------------------------------------------

-- Few-Shot Prompt --

Below are examples of different types of requirements and their classifications:

{examples}

Requirement: {text}

--------------------------------------------------

-- Chain-of-Thought (CoT) Prompt (Explanations Only) --

Let's analyze the classification of the requirement step by step.

Step 1: Read the explanations of different types of requirements:
{explanations}

Step 2: Understand how to classify requirements using these explanations as guidance.

Step 3: Apply this understanding to the following requirement:

Requirement: {text}

Step 4: Determine the classification of the requirement and provide the final label of the class without any explanations.

--------------------------------------------------

-- Chain-of-Thought (CoT) Prompt (Examples + Explanations) --

Let's analyze the classification of requirements step by step.

Step 1: Review the examples of different types of requirements and their classifications:
{examples}

Step 2: Read the explanations for these classifications:
{explanations}

Step 3: Understand how to classify requirements using the examples and explanations as guidance.

Step 4: Apply this understanding to the following requirement:

Requirement: {text}

Step 5: Determine the classification of the requirement and provide the final label of the class without any explanations.



========================================
AUTOMATIC PROMPT ENGINEERING
========================================

-- Initial (Sample) Prompt --

You are an expert system that needs to classify software requirements into two categories: {category} and {opposite_category}.

Let's analyze the classification of requirements step by step.

Step 1: Review the examples of different types of requirements and their classifications:

{formatted_examples}

Step 2: Read the explanations for these classifications:

{explanations}

Step 3: Understand how to classify requirements using the examples and explanations as guidance.

Step 4: Apply this understanding to the following requirement.

Step 5: Determine the classification of the requirement and provide the final label of the class without any explanations.
Based on these examples and explanations classify unseen software requirements into {category} or {opposite_category}. Just give the final label without any explanations. The output categories should be exactly the same as the categories mentioned here.

--------------------------------------------------

-- Optimization Prompt --

You are required to enhance and clarify the explanations of the categories in the prompt by integrating illustrative examples and information implicitly referenced in the initial context. The optimized prompt must follow these strict guidelines:

Maintain the Original Steps: The steps in the optimized prompt must remain exactly the same as in the sample prompt; no changes should be made to the steps' structure or order. Do not add any new steps or content beyond the existing steps.
Expand Explanations: Enrich and expand the explanations of each category within the steps, incorporating any new examples provided at the end of the sample prompt. Use these examples to enhance understanding and provide clarity, but ensure all content remains within the existing steps and does not extend beyond them.
Incorporate Class Explanations: Specifically, integrate the detailed "Class Explanations" of categories from the first prompt into the optimized prompt. For each category, introduce implicit clarifications based on relevant data extracted from the context, keeping all additions within the boundaries of the original steps.
Use New Examples: If there are new examples at the end of the prompt, use them to further expand and illustrate the explanations within the existing steps. Do not include any content beyond step 5.
End Strictly After Step 5: The optimized prompt must strictly end after step 5. Do not add any additional steps, conclusions, or content beyond this point.
Focus Only on Explanations: Remember, only the explanations within the steps should be expanded; the steps themselves should remain unchanged in structure and order. Any new examples should be used to enhance the explanations within the steps, not to add new content or extend the prompt beyond its original end.

Given the above strict instructions, extend the prompt below using the outlined techniques. Ensure that the new optimized prompt ends strictly after step 5, with no additional content beyond that point:
"""
{final_prompt}
"""

========================================
BEST QUALITY vs. NON-QUALITY OPTIMISED PROMPT
========================================

You are an expert system that needs to classify software requirements into two categories: **Quality** and **Non-Quality**.

Let's analyze the classification of requirements step by step.

**Class Explanations:**

* **Quality**: Quality requirements specify attributes like performance, security, usability, reliability, etc. These requirements focus on how well the system performs its functions and impose constraints on the system's operation. Examples include:
	+ "'The owner shall have free access to all of the streaming movies.'" (specifies a quality attribute, i.e., usability)
	+ "'Website must interface with the CyberSource API to process credit card transactions.'" (specifies a quality attribute, i.e., security)
	+ "'The website shall be attractive to all audiences. The website shall appear to be fun and the colors should be bright and vibrant.'" (specifies a quality attribute, i.e., usability)
* **Non-Quality**: Non-quality requirements are requirements that do not specify quality attributes. They might include functional requirements or other specifications that do not focus on the quality aspects of the system. Examples include:
	+ "'The realtor shall be able to retrieve a map showing property locations for a specified area'" (does not specify a quality attribute)
	+ "'The system shall offer a display of all the Events in the exercise.'" (does not specify a quality attribute)
	+ "'The product will display an available status for unreserved conference rooms.'" (does not specify a quality attribute)

**Classification Guideline:**

1. Review the requirement and identify if it specifies a quality attribute (e.g., performance, security, usability, reliability, etc.).
2. If the requirement specifies a quality attribute, classify it as **Quality**.
3. If the requirement does not specify a quality attribute, classify it as **Non-Quality**.

Now, classify unseen software requirements into **Quality** or **Non-Quality**. Just provide the final label without any explanations. The output categories should be exact the same as the categories mentioned here.


========================================
BEST FUNCTIONAL vs. NON-FUNCTIONAL OPTIMISED PROMPT
========================================

You are an expert system that needs to classify software requirements into two categories: **Functional** and **Non-Functional**.

Let's analyze the classification of requirements step by step.

Step 1: Review the examples of different types of requirements and their classifications:

"'When a game is ended the product shall notify the players that the game is ended.'" --> **Functional**  
"'The system shall display data from the Sync Matrix 1.0 and Exercise Management Tool 1.0 applications'" --> **Functional**  
"'Program Administrators and Nursing Staff Members shall have the ability to specify which classes are required for a Program of Study'" --> **Functional**  
"'Classes for a given cohort shall not conflict with regards to the time and day that they are offered.'" --> **Functional**  
"'Website must be fully operational with MSN TV2.'" --> **Non-Functional**  
"'The verbiage used within the system shall be consistent with Standard English and the terminology of the national Nursing Community.'" --> **Non-Functional**  
"'The product shall ensure that the databaseâ€™s data corresponds to the data entered by the user. Each conference room reservation in the system will contain the same information as was entered by the user.'" --> **Non-Functional**  
"'All authorized users once authenticated must be able to logon to the Disputes System'" --> **Non-Functional**

**Class Explanations:**

* **Functional**: These requirements specify what the system should do. They describe the functionality or services that the system is expected to provide. Examples include:
	+ "'When a game is ended the product shall notify the players that the game is ended.'" (describes a specific behavior or function of the system)
	+ "'The system shall display data from the Sync Matrix 1.0 and Exercise Management Tool 1.0 applications'" (describes a specific behavior or function of the system)

* **Non-Functional**: These requirements specify how the system should behave and impose constraints on the system's functionality. They describe the system's qualities or attributes, such as performance, security, usability, reliability, etc. Examples include:
	+ "'Website must be fully operational with MSN TV2.'" (describes a constraint on the system's functionality)
	+ "'The verbiage used within the system shall be consistent with Standard English and the terminology of the national Nursing Community.'" (describes a constraint on the system's functionality)

**Classification Guideline:**

1. If the requirement describes a specific behavior or function of the system, classify it as **Functional**.
2. If the requirement describes a constraint on the system's functionality or imposes a quality or attribute on the system, classify it as **Non-Functional**.

Step 2: Read the explanations for these classifications:

- Functional: Functional requirements specify what the system should do. They describe the functionality or services that the system is expected to provide. These requirements define the specific behaviors or functions of the system, such as calculations, technical details, data manipulation, processing, and other specific functionality that shows how the system is to perform certain tasks.
- Non-Functional: Non-functional requirements specify how the system should behave and impose constraints on the system's functionality. They describe the system's qualities or attributes, such as performance, security, usability, reliability, etc. These requirements define criteria that can be used to judge the operation of a system, rather than specific behaviors.

Step 3: Understand how to classify requirements using the examples and explanations as guidance.

Step 4: Apply this understanding to the following requirement.

Step 5: Determine the classification of the requirement and provide the final label of the class without any explanations.

The output categories should be exact the same as the categories mentioned here: **Functional** and **Non-Functional**.

